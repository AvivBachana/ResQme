import pandas as pd
\nimport random\nimport time\nfrom openai import OpenAI\nimport os\n\n# === CONFIG ===\nos.environ[\"OPENAI_API_KEY\"] = \"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\"\nclient = OpenAI()  # \u05d9\u05d5\u05e6\u05d0 \u05de\u05e0\u05e7\u05d5\u05d3\u05ea \u05d4\u05e0\u05d7\u05d4 \u05e9\u05d4\u05beAPI key \u05e0\u05de\u05e6\u05d0 \u05d1\u05de\u05e9\u05ea\u05e0\u05d4 \u05e1\u05d1\u05d9\u05d1\u05d4\n\nSYMPTOM_FILE = (\"symptom_matrix_english_v2.csv\")\nOUTPUT_FILE = \"generated_gpt_calls.csv\"\nNUM_CALLS_PER_DISEASE = 10\n\n# === LOAD SYMPTOM MATRIX ===\nsymptom_matrix = pd.read_csv(SYMPTOM_FILE, index_col=0)\n\n# === FUNCTION: Build prompt ===\ndef build_prompt(symptoms: list) -> str:\n    symptom_list = ', '.join(symptoms)\n    return f\"\"\"Write a short emergency call *monologue* in English, as if a distressed civilian is calling a medical emergency center.\n\nThe caller should describe an emergency situation involving the following symptoms:\n{symptom_list}\n\nThe monologue should be realistic and emotional, possibly showing confusion, panic, hesitation, informal language, or repetitions. The speaker should NOT mention the name of any disease \u2013 only describe the symptoms directly or indirectly.\n\nFocus on natural speech: disorganized phrasing, missing words, fear, or uncertainty are welcome. This should feel like a real person under pressure calling for help.\n\nOnly include the caller\u2019s words \u2013 do NOT include any dispatcher responses or questions.\n\nThis output will later be used for Text-to-Speech generation, so write only the caller\u2019s spoken text.\"\"\"\n\n\n# === FUNCTION: Call GPT ===\ndef call_gpt(prompt):\n    try:\n        response = client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n            temperature=1.0,\n            max_tokens=500\n        )\n        return response.choices[0].message.content\n    except Exception as e:\n        print(\"Error:\", e)\n        return None\n\n# === MAIN LOOP ===\nall_calls = []\n\nfor disease in symptom_matrix.index:\n    true_symptoms = symptom_matrix.loc[disease]\n    present_symptoms = [s for s in true_symptoms.index if true_symptoms[s]]\n    if not present_symptoms:\n        continue\n\n    for _ in range(NUM_CALLS_PER_DISEASE):\n        sampled = random.sample(present_symptoms, min(3, len(present_symptoms)))\n        prompt = build_prompt(sampled)\n        result = call_gpt(prompt)\n        if result:\n            all_calls.append({\n                \"disease\": disease,\n                \"symptoms_used\": \", \".join(sampled),\n                \"generated_call\": result\n            })\n            print(result)\n        time.sleep(2)\n\n# === SAVE TO FILE ===\npd.DataFrame(all_calls).to_csv(OUTPUT_FILE, index=False, encoding=\"utf-8\")\nprint(f\"\u2705 \u05e0\u05e9\u05de\u05e8\u05d5 {len(all_calls)} \u05e9\u05d9\u05d7\u05d5\u05ea \u05dc\u05e7\u05d5\u05d1\u05e5 {OUTPUT_FILE}\")\n"
