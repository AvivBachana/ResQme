"""
Auto-generated adapter to run the user's original script inside a class without modifying its logic.
The original code is embedded as a raw string and executed in an isolated namespace.
"""
from types import SimpleNamespace

class DataScript:
    def __init__(self, extra_globals=None):
        # Extra globals can inject variables like paths if the original script expects them
        self.extra_globals = extra_globals or {}

    def run(self):
        code = r"import pandas as pd\n\ndf = pd.DataFrame()\n\n# Dictionaries for translation\ndisease_translation = {\n    \"\u05e2\u05d9\u05dc\u05e4\u05d5\u05df\": \"Fainting\", \"\u05d0\u05e4\u05d9\u05dc\u05e4\u05e1\u05d9\u05d4\": \"Epilepsy\", \"\u05d8\u05d1\u05d9\u05e2\u05d4\": \"Drowning\", \"\u05d4\u05e8\u05e2\u05dc\u05d4\": \"Poisoning\",\n    \"\u05d0\u05e1\u05d8\u05de\u05d4\": \"Asthma\", \"\u05d4\u05d9\u05e4\u05e8\u05d5\u05d5\u05e0\u05d8\u05d9\u05dc\u05e6\u05d9\u05d4\": \"Hyperventilation\", \"\u05d4\u05dc\u05dd\": \"Shock\",\n    \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05e8\u05d0\u05e9\": \"Head injury\", \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05d1\u05d8\u05df\": \"Abdominal injury\", \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05d7\u05d6\u05d4\": \"Chest injury\",\n    \"\u05db\u05d5\u05d5\u05d9\u05d5\u05ea\": \"Burns\", \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05d4\u05d3\u05e3\": \"Blast injury\", \"\u05e9\u05d1\u05e8\u05d9\u05dd\": \"Fractures\",\n    \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05e2\u05de\u05d5\u05d3 \u05e9\u05d3\u05e8\u05d4\": \"Spinal injury\", \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05d1\u05e2\u05dc\u05d9 \u05d7\u05d9\u05d9\u05dd \u05d0\u05e8\u05e1\u05d9\u05d9\u05dd\": \"Venomous animal injury\",\n    \"\u05e4\u05d2\u05d9\u05e2\u05d5\u05ea \u05d0\u05e7\u05dc\u05d9\u05dd\": \"Climate injury\", \"\u05ea\u05e2\u05d5\u05e7\u05ea \u05d7\u05d6\u05d4\": \"Angina\", \"\u05d0\u05d5\u05d8\u05dd \u05e9\u05e8\u05d9\u05e8 \u05d4\u05dc\u05d1\": \"Heart attack\",\n    \"\u05d3\u05d5\u05dd \u05dc\u05d1\": \"Cardiac arrest\", \"\u05d4\u05e4\u05e8\u05e2\u05d5\u05ea \u05e7\u05e6\u05d1\": \"Arrhythmia\", \"\u05e9\u05e4\u05e2\u05ea\": \"Flu\",\n    \"\u05e6\u05d4\u05d1\u05ea\": \"Hepatitis\", \"\u05d0\u05d9\u05d9\u05d3\u05e1\": \"AIDS\", \"\u05db\u05dc\u05d1\u05ea\": \"Rabies\"\n}\n\nsymptom_translation = {\n    \"\u05d7\u05d5\u05e1\u05e8 \u05d4\u05db\u05e8\u05d4\": \"Loss of consciousness\", \"\u05db\u05d0\u05d1\u05d9\u05dd \u05d1\u05d7\u05d6\u05d4\": \"Chest pain\", \"\u05e7\u05d5\u05e6\u05e8 \u05e0\u05e9\u05d9\u05de\u05d4\": \"Shortness of breath\",\n    \"\u05e6\u05e4\u05e6\u05d5\u05e4\u05d9\u05dd\": \"Wheezing\", \"\u05db\u05d0\u05d1 \u05e8\u05d0\u05e9\": \"Headache\", \"\u05d4\u05e7\u05d0\u05d5\u05ea\": \"Vomiting\", \"\u05e1\u05d7\u05e8\u05d7\u05d5\u05e8\u05ea\": \"Dizziness\",\n    \"\u05e2\u05d9\u05d5\u05d5\u05ea \u05d1\u05d2\u05e4\u05d4\": \"Limb deformity\", \"\u05e0\u05e4\u05d9\u05d7\u05d5\u05ea\": \"Swelling\", \"\u05e9\u05dc\u05e4\u05d5\u05d7\u05d9\u05d5\u05ea\": \"Blisters\", \"\u05db\u05d9\u05d7\u05dc\u05d5\u05df\": \"Cyanosis\",\n    \"\u05d2\u05dc\u05d2\u05d5\u05dc \u05e2\u05d9\u05e0\u05d9\u05d9\u05dd\": \"Eye rolling\", \"\u05e9\u05d9\u05e2\u05d5\u05dc\": \"Cough\", \"\u05d7\u05d9\u05d5\u05d5\u05e8\u05d5\u05df\": \"Pallor\", \"\u05e9\u05d9\u05ea\u05d5\u05e7\": \"Paralysis\",\n    \"\u05d3\u05d5\u05e4\u05e7 \u05de\u05d4\u05d9\u05e8\": \"Rapid pulse\", \"\u05d8\u05e9\u05d8\u05d5\u05e9\": \"Blurred vision\", \"\u05d7\u05d5\u05dc\u05e9\u05d4\": \"Weakness\", \"\u05d1\u05dc\u05d1\u05d5\u05dc\": \"Confusion\"\n}\n\n# Translate index and columns\ndf.index = [disease_translation.get(d, d) for d in df.index]\ndf.columns = [symptom_translation.get(s, s) for s in df.columns]\n\n# Save translated matrix\ntranslated_path = \"translated_symptom_matrix_full.csv\"\ndf.to_csv(translated_path, encoding=\"utf-8\")\ntranslated_path\n"
        # Create a sandboxed globals dict; allow imports but prevent polluting our module globals
        g = {"__name__": "__main__"}
        g.update(self.extra_globals)
        exec(code, g, g)
        return SimpleNamespace(**g)  # return namespace with any artifacts the script produced
